name: Release with gh CLI

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # 必须授权才能创建 release 和上传文件

jobs:
  build-and-release:
    name: Build & Release for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: rqr-linux-x64
            ext: ''
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: rqr-macos-x64
            ext: ''
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            artifact_name: rqr-windows-x64
            ext: '.exe'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare artifact
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/rqr${{ matrix.ext }} ./dist/${{ matrix.artifact_name }}${{ matrix.ext }}
        shell: bash

      - name: Create or update release and upload asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.ref_name }}"
          ASSET_PATH="./dist/${{ matrix.artifact_name }}${{ matrix.ext }}"

          # 创建 Release（如果不存在）
          gh release create "$TAG" \
            --title "Release $TAG" \
            --notes "Automated release for $TAG" \
            --latest \
            || echo "Release already exists, skipping creation."

          # 上传文件到 Release
          gh release upload "$TAG" "$ASSET_PATH" \
            --clobber  # 如果文件已存在则覆盖

        shell: bash
